Props의 드릴링
   - A.jsx ~ Z.jsx까지 있다고 가정할 때 부모 A컴포넌트부터 최하위 Z컴포넌트까지
   Props를 보내는 과정을 Props의 드릴링이라고 한다.

Context API는 언제 사용할까?
   - 변화가 없는 것. 즉 다크모드 화이트모드 등 값이 선언되어 있는 상태로 변화가 없는
   상태의 변수를 지정할 때 사용한다.
   - Context는 변화를 시켜주는 API가 아니다.
   - 변화를 주면 안되지만 혹시나 변화를 생길것을 대비하여 만들어져 있다.

Context의 단점
   - Provider 컴포넌트는 value Props를 받아서 하위 컴포넌트에게 전달한다
   - value가 업데이트 되었을 때 Context로 감싸진 모든 컴포넌트가 리랜더링된다.

===================================================================
Redux
	- 전역 상태 관리 라이브러리이며, 리액트 뿐만 아니라 모든 JS코드에서 작동된다.
	Flux 패턴을 기반으로 생성되었기 때문에 단방향으로 동작하여 흐름을 파악하기 쉽고 예측 가능하다.

Redux 패턴
	- Component -> Action -> Reducer -> Store -> State -> Component

1) Component
	- action이 발생하는 작은 단위, 나중에 변경된 state를 반영하기 위해 store가 subscribe(구독)해 놓는다.
2) Action 
	- 변화가 필요할 때 발생시키는 신호, dispatch()로 감싸서 reducer로 전달된다. 
	action에는 구분점(type)이 필요하다.
3) Reducer
	- 전달 받은 action에서 type을 가져온 뒤 구분하여
	state를 변경하는 등 알맞은 로직의 함수가 실행되는 순수함수이다.
4) Store
	- state를 저장하는 저장소이며, subscribe 해놓은 컴포넌트로 가서
	변경된 state 값을 전달한다.
	
Redux를 사용하는 이유
	- 컴포넌트의 개수가 늘어나고 구조가 복잡해지면, 관리해야 하는 state가 늘어나고, 이를 props로 계속
	전달하다보면 가독성이 떨어지고 전달을 목적으로 하는 props의 개수가 늘어나기 때문에 비효율적이다.
	또한 props 이름을 변경하게 된다면 모든 props 이름을 수정해야 하므로 유지보수 및 코드 관리가 좋지않다.
	따라서 redux 라이브러리를 사용하게 되면 하나의 store에 모든 state와 로직을 저장할 수 있으며
	원하는 컴포넌트에서 바로 사용할 수 있다. 로직을 따로 분리하여 분업이 가능하고, 
	단방향으로 동작하기 때문에 흐름을 예측하기가 쉽다. 하지만 컴포넌트 구조가 단순하고
	소규모 프로젝트의 경우 굳이 redux 라이브러리를 사용할 필요가 없으며, 무분별하게 사용하면
	오히려 코드가 복잡해질 수 있기 때문에 공용으로 사용되는 state나 초기화되지 않고 계속 유지되어야 하는
	state일 경우에만 사용하는 것이 바람직하다.
	
Redux의 원칙
	1) 1개의 app에는 1개의 store만 존재해야 한다.
	- 여러개 reducer를 조합하여 하나의 store를 생성하며, 조합할 때에는 combineReducers()를 사용한다
	2) state는 불변성을 가져야한다.
	- 기존의 state를 수정하지 않고 새로운 객체를 넣어주어야 변경이 감지된다.
	3) 리듀서는 반드시 순수함수로 만들어야 한다.
	- 입력값과 출력값이 똑같아야 하며, state는 변경하지 말고 action을 통해 변경한
	새로운 state 객체를 만든 뒤 리턴해야한다.
	- date, random(), fetch() 등과 같이 실행할 때마다 다른 결과 값이 나타나는 작업은
	리듀서 함수 밖에서 처리해주어야 한다. 이러한 작업은 middleware에서 작업하게 된다.
	
Middleware
	- Reducer로 가기 전에 API 호출 및 예측 불가능한 로직들을 처리한 뒤 
	Reducer로 Action을 전달하여 state가 update된다. 이로 인해 Reducer는 순수 함수를 유지할 수 있게 된다. 
	즉, Reducer로 가기 전에 서버에 데이터 요청을 해서 값을 가져오라는 뜻이다.

	Component → Action → Middleware → Reducer → Store → State
												
	API
	API 를 처리해주는 것이 React - Saga














